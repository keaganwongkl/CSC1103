Pseudo Code Done:
- delay
- curBoard
- gameLogic
- bufferToNum
- boardToChar
- altTurn
- draw
-- To Be Continued --

FUNCTION delay(number_of_seconds)
    milli_seconds <-- 1000 * number_of_seconds
    start_time <-- clock()
    WHILE (clock() < start_time + milli_seconds)

    END WHILE
END FUNCTION

FUNCTION curBoard(int from[], int to[])
    FOR(int i = 0; i < 9; i++)
        to[i] <-- from[i]
    END FOR
END FUNCTION


FUNCTION gameLogic(board, mode)
    gs <-- gameState(board)
    IF (gs == X)
        tictactoeWindow(board, turn, 'X')
        PRINT "X won!"
    END IF
    ELSE IF (gs == O)
        tictactoeWindow(board, turn, 'O')
        PRINT "O won!"
    END IF
    ELSE IF (gs == 0)
        tictactoeWindow (board, turn, 'D');
        PRINT "it is a draw!"
    END IF
    ELSE
        IF (mode == 1)
            altTurn()
            tictactoeWindow(board, turn, ' ')
        END IF
        ELSE
            altTurn()
            PRINT "Player X or O Turn"
            IF (turn == O)
                tictactoeWindow(board, turn, ' ')
            END IF
            ELSE
                random <-- rand() % difficulty
                PRINT random generated value
                PRINT "Computer is thinking"
                delay(delay value)
                IF (random != 1)
                    rand() % difficulty
                    PRINT output
                    output <-- 0
                END IF
                ELSE
                    putInBoard(board, badai(board, 8), X)
                END IF
                gameLogic(board, mode)
            END IF
        END IF
    END IF
END FUNCTION


FUNCTION bufferToNum(buffer[])
    n <-- 0 
    FOR i = 0 to list length do
        n <-- 10 * n + buffer[i] - '0'
    END FOR
    return n
END FUNCTION

FUNCTION boardToChar(i)
    a <-- board[i]
    IF a == X do
        return 'X'
    END IF
    ELSE IF a == O do
        return 'O'
    END IF
    ELSE
        return a + '0'
    END IF
END FUNCTION


FUNCTION altTurn
    IF turn == O do 
        turn <-- x
    END IF
    ELSE IF turn == X do
        turn <-- O
    END IF 
END FUNCTION

FUNCTION draw(l_board[])
    FOR i = o to i = 8 do
        IF (l_board[i] == i+1) do
            return 0;
        END IF
    END FOR
    return 1;
END FUNCTION