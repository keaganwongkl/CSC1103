//STILL NEEDS TO CHANGE VARIABLE NAME ETC
//THIS IS THE PERFECT MINIMAX, STILL NEED TO DUMB IT DOWN


#include <stdio.h>

#define X -1 //defines X to allow change of turn
#define O -2 //defines O to allow change of turn

#define MAX_SIZE 50 //max characters user can input

int turn = O; //sets your first turn to O

int board[] = {1, 2, 3, 4, 5, 6, 7, 8, 9}; //shows the numbers on board placement

int variations = 0; //shows number of possible moves available

void copyBoard(int from[], int to[]){ //saves current board state
    for(int i = 0; i < 9; i++){
        to[i] = from[i];
    }
}

//gets line WITHOUT \n 
int getl(char s[], int lim){
    int c, i;

    for(i = 0; i < lim-1 && (c = getchar()) != EOF && c != '\n'; i++)
        s[i] = c;
    
    s[i] = '\0';
    return i;
}

//converts char[] to int to allow for > and < operands to work
int bufferToNum(char buffer[]){
    int n = 0;
    for(int i = 0; buffer[i] != '\0'; i++){
        n = 10 * n + buffer[i] - '0';
    }
    return n;
}

//converts the board numbers to char to display
char boardToChar(int i){
    int a = board[i];
    if (a == X){        
        return 'X';
    } else if (a == O){
        return 'O';
    } else {    
       return a + '0';
    }    
}

//prints board
void printBoard() {
  printf("=============\n"
      "| %c | %c | %c |\n"
      "-------------\n"
      "| %c | %c | %c |\n"
      "-------------\n"
      "| %c | %c | %c |\n"
      "=============\n", //
      boardToChar(0), boardToChar(1), boardToChar(2),
      boardToChar(3), boardToChar(4), boardToChar(5),
      boardToChar(6), boardToChar(7), boardToChar(8));    
}

//alternates turn
void alternateTurn(){
    if (turn == O){
        turn = X;    
    } else if (turn == X){
        turn = O;
    }
}

//returns 1 if draw, return 0 if not a draw
int drawCheck(int l_board[]){
    for(int i = 0; i < 9; i++){
        if (l_board[i] == i+1){
            return 0;
        }
    }
    return 1;
}

//returns X if X won and O if O won and 0 if draw
int winCheck(int l_board[]){
    //Rows
    for (int i = 0; i < 3; i++){
        if (l_board[3*i] == l_board[3*i + 1] && l_board[3*i + 1] == l_board[3*i + 2]){
            return l_board[3*i];
        }
    }

    //Columns
    for (int j = 0; j < 3; j++){
        if (l_board[j] == l_board[3 + j] && l_board[3 + j] == l_board[6 + j]){
            return l_board[j];
        }
    }

    //Diagonal Top Left to Bottom Right
    if (l_board[0] == l_board[4] && l_board[0] == l_board[8]){
        return l_board[0];
    }

    //Diagonal Top Right to bottom Left
    if (l_board[2] == l_board[4] && l_board[2] == l_board[6]){
        return l_board[2];
    }

    return 0;
}

//1 if no board placement and 0 if there is board placement 
int putInBoard(int l_board[], int pos, int newVal){
    if (l_board[pos] == pos+1){
        l_board[pos] = newVal;
        return 1;
    } else
    {
        return 0;
    }    
}

//X if X win, O if O win, 0 if draw, 1 if nothing
int gameState(int l_board[]){
    int wc = winCheck(l_board);
    if (wc == X){
        return X;
    } else if(wc == O){
        return O;
    } else {
        if (drawCheck(l_board)){
            return 0;
        }
    }
    return 1;
}

//shows allowed moves to be taken within the range of 1-9, array 0-8
void legalMoves(int l_board[], int output[]){    
    for(int i = 0; i < 9; i++){
        if (l_board[i] == i+1){
            output[i] = 1;
        } else {
            output[i] = 0;
        }
    }
}

//best possible move possible
int max(int a, int b){
    return a>b ? a : b;
}

//worst possible move possible
int min(int a, int b){
    return a<b ? a : b;
}

//X is computer
int minimax(int l_board[], int depth, int maximising){
    int gs = gameState(l_board); //goes through every single move possible from both sides
    variations++; //totals number of possible move that can be made
    if (gs == X){ //best move that can be made
        return 10;
    } else if (gs == O){ //worst move that can be made
        return -10;
    } else if (gs == 0){ //no possible move
        return 0;
    }
    if (depth == 0){ //no further board states available
        return 0;
    }
    if (maximising){
        //X's Turn so it has to maximise
        int val = -100; //works together with gs to show how effective all moves will be
        int legalMovesArr[9]; //prevents illegal moves <1 || >9
        legalMoves(l_board, legalMovesArr); //finds the legal moves available with current boardstate
        for (int i = 0; i < 9; i++){
            if (legalMovesArr[i]){
                int tempBoard[9];
                copyBoard(l_board, tempBoard);
                putInBoard(tempBoard, i, X);
                val = max(minimax(tempBoard, depth-1, 0), val);
            }
        }
        return val;
    } else {      
        // for minimising to try to find the worst possible moves  
        int val = 100;
        int legalMovesArr[9];
        legalMoves(l_board, legalMovesArr);
        for (int i = 0; i < 9; i++){
            if (legalMovesArr[i]){
                int tempBoard[9];
                copyBoard(l_board, tempBoard);
                putInBoard(tempBoard, i, O);
                val = min(minimax(tempBoard, depth-1, 1), val);
            }
        }
        return val;
    }
}

int ai(int l_board[], int depth){ //uses current boardstate to find the best possible moves
    int legalMovesArr[9];
    legalMoves(board, legalMovesArr);
    int val = -100;    
    int best_move = 0;
    for (int i = 0; i < 9; i++){
        if (legalMovesArr[i]){
            int tempBoard[9];
            copyBoard(l_board, tempBoard);
            putInBoard(tempBoard, i, X);
            int temp = minimax(tempBoard, depth-1, 0);
            if (val <= temp){
                val = temp;
                best_move = i;
            }            
        }
    }
    return best_move; //the closer val is to 0, the better the move
}

int main(){
    printBoard(); //prints the board
    int gameOn = 0; //ensures game is turned on
    char buffer[MAX_SIZE]; //allows for input limit of MAX_SIZE

    while(!gameOn){
        if (turn == O){
            printf("%c's turn: ", turn == X ? 'X' : 'O'); //UI to show whos turn it currently is on
            getl(buffer, MAX_SIZE); //user input between 1 and 9 for board placement;
            int num = bufferToNum(buffer);        
            while (num <= 0 || num > 9){ //checks for valid user input e.g non-number or out of range
                printf("Please enter an integer between 1 and 9: ");
                getl(buffer, MAX_SIZE);
                num = bufferToNum(buffer);//converts char input to integer to allow for range validity           
            }
            if (putInBoard(board, num-1, turn)){ //boardspace is empty and can be placed
                ;
            } else {            
                while(!putInBoard(board, num-1, turn)){ //prevents override of board placement
                    printf("Something already exists, Please enter a new number: ");
                    getl(buffer, MAX_SIZE);
                    num = bufferToNum(buffer);
                }
            }
        } else { //game has been lost, won or drawn
            putInBoard(board, ai(board, 8), X);
            printf("Calculated %d variations\n", variations);
            variations = 0;
        }
        
        printBoard();                
        alternateTurn();
        int gs = gameState(board);
        if (gs == X){
            printf("X won!");
            return 0;
        } else if (gs == O){
            printf("O won!");
            return 0;
        } else if (gs == 0){
            printf("Draw!");
            return 0;
        }           
    }
    
    return 0;
}
